{"version":3,"sources":["keys.js","WeatherInfo.js","App.js","serviceWorker.js","index.js"],"names":["APPID","WeatherInfo","props","firstLetters","bind","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","weather","this","weatherData","weatherDescription","description","className","name","sys","country","main","temp","feels_like","temp_min","temp_max","wind","speed","coord","lat","lon","Component","App","state","inputCity","inputState","inputZip","errors","loading","changeValue","handleSubmit","findCoordinates","e","setState","target","value","preventDefault","params","fetch","then","res","json","data","cod","message","newData","unshift","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","isButtonValid","displayWeather","map","index","key","onSubmit","type","aria-label","placeholder","onChange","disabled","onClick","role","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5e9c1455.chunk.js","sourcesContent":["export const APPID = \"1056584889f2640c25a4b85cb85c6e88\";\r\n","import React, { Component } from \"react\";\r\n\r\nclass WeatherInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.firstLetters = this.firstLetters.bind(this);\r\n  }\r\n\r\n  firstLetters(str) {\r\n    let splitStr = str.toLowerCase().split(\" \");\r\n    for (let i = 0; i < splitStr.length; i++) {\r\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\r\n      // Assign it back to the array\r\n      splitStr[i] =\r\n        splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\r\n    }\r\n    // Directly return the joined string\r\n    return splitStr.join(\" \");\r\n  }\r\n  render() {\r\n    const weather = this.props.weatherData;\r\n    const weatherDescription = this.firstLetters(\r\n      weather.weather[0].description\r\n    );\r\n    return (\r\n      <div className=\"card\">\r\n        <h3 className=\" card-header display-4\">\r\n          {weather.name},{weather.sys.country}\r\n        </h3>\r\n        <div className=\"card-body\">\r\n          <h3>Temperature right now : {weather.main.temp}&#176;F</h3>\r\n          <h3>Feels like: {weather.main.feels_like}&#176;F</h3>\r\n          <h4>\r\n            Min: {weather.main.temp_min}&#176;F Max: {weather.main.temp_max}\r\n            &#176;F\r\n          </h4>\r\n          <h4>{weatherDescription}</h4>\r\n          <h4> Wind Speed: {weather.wind.speed}mph</h4>\r\n          <h5>\r\n            Latitiude: {weather.coord.lat} Longitude: {weather.coord.lon}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { APPID } from \"./keys\";\nimport WeatherInfo from \"./WeatherInfo\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: [],\n      inputCity: \"\",\n      inputState: \"\",\n      inputZip: \"\",\n      errors: \"\",\n      loading: false\n    };\n    this.changeValue = this.changeValue.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.findCoordinates = this.findCoordinates.bind(this);\n  }\n  changeValue(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({ loading: true });\n    let params = \"\";\n    if (this.state.inputZip) {\n      params = \"zip=\" + this.state.inputZip;\n    } else {\n      if (this.state.inputCity && this.state.inputState) {\n        params = \"q=\" + this.state.inputCity + \",\" + this.state.inputState;\n      } else if (this.state.inputCity) {\n        params = \"q=\" + this.state.inputCity;\n      } else if (this.state.inputState) {\n        params = \"q=\" + this.state.inputState;\n      }\n    }\n    fetch(\n      \"https://api.openweathermap.org/data/2.5/weather?\" +\n        params +\n        \"&units=imperial&appid=\" +\n        APPID\n    )\n      .then(res => res.json())\n      .then(data => {\n        if (data.cod !== 200) {\n          this.setState({\n            errors: data.message,\n            loading: false\n          });\n        } else {\n          const newData = [...this.state.weatherData];\n          newData.unshift(data);\n          this.setState({\n            errors: \"\",\n            weatherData: newData,\n            loading: false\n          });\n        }\n      });\n  }\n  findCoordinates() {\n    if (!navigator.geolocation) {\n      console.log(\"Geolocation is not supported by your browser\");\n    } else {\n      this.setState({ loading: true });\n      navigator.geolocation.getCurrentPosition(position => {\n        fetch(\n          \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n            position.coords.latitude +\n            \"&lon=\" +\n            position.coords.longitude +\n            \"&units=imperial&appid=\" +\n            APPID\n        )\n          .then(res => res.json())\n          .then(data => {\n            if (data.cod !== 200) {\n              this.setState({\n                errors: data.message,\n                loading: false\n              });\n            } else {\n              const newData = [...this.state.weatherData];\n              newData.unshift(data);\n              this.setState({\n                errors: \"\",\n                weatherData: newData,\n                loading: false\n              });\n            }\n          });\n      });\n    }\n  }\n  render() {\n    const isButtonValid =\n      this.state.inputCity || this.state.inputState || this.state.inputZip;\n    const displayWeather = this.state.weatherData.map((weather, index) => (\n      <div key={index}>\n        <WeatherInfo weatherData={weather} />\n        <br />\n      </div>\n    ));\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit}>\n          <h1 className=\"display-2\">Get the Weather</h1>\n          <h4>By City and State(If located within the US)</h4>\n          <div className=\"input-group .input-space\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">City and State</span>\n            </div>\n            <input\n              type=\"text\"\n              aria-label=\"City\"\n              className=\"form-control\"\n              name=\"inputCity\"\n              placeholder=\"City\"\n              value={this.state.inputCity}\n              onChange={this.changeValue}\n            />\n            <input\n              type=\"text\"\n              aria-label=\"State\"\n              className=\"form-control\"\n              name=\"inputState\"\n              placeholder=\"State\"\n              value={this.state.inputState}\n              onChange={this.changeValue}\n            />\n          </div>\n          <h4>\n            <br />\n            Or\n          </h4>\n          <div className=\"input-group .input-space\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Zipcode</span>\n            </div>\n            <div className=\"col-xs-2\">\n              <input\n                type=\"text\"\n                aria-label=\"ZipCode\"\n                className=\"form-control\"\n                name=\"inputZip\"\n                placeholder=\"Zipcode\"\n                value={this.state.inputZip}\n                onChange={this.changeValue}\n              />\n            </div>\n          </div>\n          <br />\n          <p>*If both fields are filled, Zipcode will be used</p>\n          <input\n            className=\" btn btn-primary btn-space shadow\"\n            type=\"submit\"\n            value=\"Submit\"\n            disabled={!isButtonValid}\n          />\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary btn-space shadow\"\n            name=\"findMe\"\n            onClick={this.findCoordinates}\n          >\n            Use My Location\n          </button>\n        </form>\n        {this.state.loading && (\n          <div className=\"container\">\n            <div className=\"row\">\n              <div>\n                <h3>Loading </h3>\n              </div>\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.errors && (\n          <div className=\"alert alert-danger\">\n            <h4>Error: {this.state.errors}</h4>\n          </div>\n        )}\n        {displayWeather}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}